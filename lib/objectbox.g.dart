// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/db/address_table/address_table.dart';
import 'core/db/address_table/country_table.dart';
import 'core/db/attachment_table/attachment_table.dart';
import 'core/db/attribute_table/attribute_table.dart';
import 'core/db/attribute_table/set_attribute_table.dart';
import 'core/db/customer_table/customer_table_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 136033739582949677),
      name: 'AttributeDataTable',
      lastPropertyId: const obx_int.IdUid(12, 8788463118332305874),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6770003418369155878),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4061806252900108624),
            name: 'attributeId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1562663898119735492),
            name: 'label',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 728893064740236605),
            name: 'attribute_template_id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3675210844447701413),
            name: 'isRequired',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1180663799502070336),
            name: 'isActive',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4160555003141088644),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6652970074494938215),
            name: 'value',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1047033904369075935),
            name: 'attributeTableId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 753781012633320433),
            relationTarget: 'AttributeTable')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 2209605042581049458),
      name: 'AttributeTable',
      lastPropertyId: const obx_int.IdUid(3, 6800400694230197617),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4069857195367838951),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3975182245759266313),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6800400694230197617),
            name: 'templateId',
            type: 6,
            flags: 40,
            indexId: const obx_int.IdUid(8, 3096020617086080130))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'attributeDataTable',
            srcEntity: 'AttributeDataTable',
            srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 709243648824170959),
      name: 'SetAttributeDataTable',
      lastPropertyId: const obx_int.IdUid(6, 4729286092539056870),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3172220737200849214),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9117444470040617034),
            name: 'attributeId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5928811846428522787),
            name: 'value',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4729286092539056870),
            name: 'customerTableId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(26, 8565695504145322395),
            relationTarget: 'CustomerTable')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 1291391269849516059),
      name: 'AddressTable',
      lastPropertyId: const obx_int.IdUid(11, 8626834205966867170),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4795290620271037135),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1258215264589725396),
            name: 'countryId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5379386249136783295),
            name: 'stateId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9007841228822502623),
            name: 'area',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4583791028254139195),
            name: 'street',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 9107748587238067835),
            name: 'details',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4314548567298749774),
            name: 'phoneNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6346352959898038666),
            name: 'addressType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1080944247056475723),
            name: 'isDefault',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8626834205966867170),
            name: 'customerTableId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(11, 9156642244528049522),
            relationTarget: 'CustomerTable')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 8536924045226797533),
      name: 'CustomerTable',
      lastPropertyId: const obx_int.IdUid(26, 7108270213133875055),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5853859260602316761),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3743851718210110496),
            name: 'customerId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4766285567782346047),
            name: 'firstNameEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2156066967003046701),
            name: 'firstNameAr',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6828280611281879850),
            name: 'lastNameEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2236649301773827450),
            name: 'lastNameAr',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8784902347954568252),
            name: 'fatherNameEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7565451597513905428),
            name: 'fatherNameAr',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3096049636346988732),
            name: 'motherNameEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7325145558948779675),
            name: 'motherNameAr',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 742296700517567012),
            name: 'dateOfBirth',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3209953669059817748),
            name: 'placeOfBirth',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 9112833976365156378),
            name: 'phoneNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 7730598702824275136),
            name: 'mobileNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 1501469149358117753),
            name: 'email',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(12, 2228079987964094118)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 4270854612798081891),
            name: 'status',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 1619071249246252998),
            name: 'templateId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 4285483268223368369),
            name: 'createdAt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 9194808617163185651),
            name: 'addressTableId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(14, 8923078658098148944),
            relationTarget: 'AddressTable'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 2819874632072061900),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 1220328922226241791),
            name: 'gender',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 4978749460097464883),
            name: 'createdSuccessfully',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 2397754487274510845),
            name: 'attributesSuccessfully',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 7695226154380901489),
            name: 'addressSuccessfully',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 7108270213133875055),
            name: 'attachmentsSuccessfully',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(8, 5840423333421238584),
            name: 'setAttachmentTable',
            targetId: const obx_int.IdUid(18, 1212266540424940807)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(9, 2870101805841619456),
            name: 'setAttributeTable',
            targetId: const obx_int.IdUid(9, 709243648824170959))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(16, 1055656976448215897),
      name: 'CountryTable',
      lastPropertyId: const obx_int.IdUid(5, 7976833649781155891),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4663851916557612726),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1241813953866071536),
            name: 'countryId',
            type: 6,
            flags: 40,
            indexId: const obx_int.IdUid(18, 4308797780551493543)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2334039401324913709),
            name: 'code',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7855340050000212117),
            name: 'nameEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7976833649781155891),
            name: 'nameAr',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(17, 4573169694995549838),
      name: 'StateTable',
      lastPropertyId: const obx_int.IdUid(6, 3032438011215443639),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3873428797511994922),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7952237751635788556),
            name: 'stateId',
            type: 6,
            flags: 40,
            indexId: const obx_int.IdUid(19, 809876266932023506)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7748848231288497239),
            name: 'code',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1387686055882619758),
            name: 'nameEn',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 393508057629776220),
            name: 'nameAr',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3032438011215443639),
            name: 'countryId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(18, 1212266540424940807),
      name: 'SetAttachmentDataTable',
      lastPropertyId: const obx_int.IdUid(8, 7826090139570104040),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6357348439647879839),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6476773967236730961),
            name: 'attributeId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4116536410112349862),
            name: 'file',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1007212120983213517),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 703048911986475735),
            name: 'isUploaded',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4286366768299932711),
            name: 'hasError',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7826090139570104040),
            name: 'customerTableId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(25, 3954280376281006246),
            relationTarget: 'CustomerTable')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(19, 4884684005274132282),
      lastIndexId: const obx_int.IdUid(26, 8565695504145322395),
      lastRelationId: const obx_int.IdUid(9, 2870101805841619456),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        827075071648334037,
        5317248504323451422,
        5537896026778024423,
        655687596901851816,
        2840869506813834821,
        3487109805965286549,
        7715634818040929030,
        6940851116471737581,
        7941018379204653330,
        4884684005274132282,
        6781270302580720816
      ],
      retiredIndexUids: const [
        7615352263970548979,
        3684899665257269885,
        1610870152304294239,
        3511043691085839074,
        3635979550438992861,
        6788120978444153740,
        2169196825294169469,
        1339079494753592631,
        6351764434769905117,
        4744411053543379105
      ],
      retiredPropertyUids: const [
        8013099878120838315,
        7880800031006848924,
        8788463118332305874,
        5214366206754210815,
        1952836452016073246,
        7326180835719809220,
        5903081397392602345,
        2821247306985400619,
        587584568152490068,
        1336630584580196755,
        3397908241981026813,
        904377996157620278,
        5840598082195664941,
        2099309897607583010,
        4006866231809505964,
        4499143617749562915,
        6448769388967751,
        4504249976161542739,
        13059035301266219,
        8734940182497014556,
        7845315279267165642,
        2886317262585979536,
        7854475898872020726,
        652732046677751318,
        4815566874583010943,
        5722700152258730408,
        1177307832615132147,
        7287478968903815218,
        570832733757128649,
        3168250060105697200,
        2710965832456587528,
        311993760470963353,
        4842097983844589014,
        2719656456398639387,
        6107377858006014116,
        5160396780505369063,
        7736949461684624114,
        4265704453857376698,
        4979499198632145272,
        5156979804833034325,
        6287362115578909958,
        9151896750316019254,
        8528365704314423241,
        1347054529141414808,
        4771300795796769591,
        5859713781029787917,
        7181063809978132361,
        8273230924732385484,
        6169434510671411252,
        4142539482022567015,
        2117057108581704994,
        6825705735068997063,
        3292299416123525442,
        3426289480257144227,
        2973887134763947260,
        8840151958730642003,
        373999951895682231,
        7406276243900951361,
        2737543052103444495,
        6737954536049106087,
        1544289413923833058,
        3223361469416283608,
        3894836214697722500,
        1506128578735852313,
        8709400813158310741,
        2785735388607367147,
        6694473981618103444,
        7580594357562641494,
        7564952878197370284,
        5796483694525153269,
        629697816952537360,
        3828547746526913493,
        6299749675336456431,
        796879919894500178,
        7448657408583574124,
        2773482139023738131,
        7960720956531812549,
        5699932570315685746,
        5497120428503577608,
        2302931148419050374,
        4263698869124516594,
        9001290384584907811
      ],
      retiredRelationUids: const [
        7008803817554522474,
        6346134987744130540,
        5646627259660518723,
        7996055408690335236,
        6329900706723119912,
        5275953222734284115,
        4221367421056405391
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AttributeDataTable: obx_int.EntityDefinition<AttributeDataTable>(
        model: _entities[0],
        toOneRelations: (AttributeDataTable object) => [object.attributeTable],
        toManyRelations: (AttributeDataTable object) => {},
        getId: (AttributeDataTable object) => object.id,
        setId: (AttributeDataTable object, int id) {
          object.id = id;
        },
        objectToFB: (AttributeDataTable object, fb.Builder fbb) {
          final labelOffset = fbb.writeString(object.label);
          final typeOffset = fbb.writeString(object.type);
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.attributeId);
          fbb.addOffset(2, labelOffset);
          fbb.addInt64(3, object.attribute_template_id);
          fbb.addBool(4, object.isRequired);
          fbb.addBool(5, object.isActive);
          fbb.addOffset(8, typeOffset);
          fbb.addOffset(9, valueOffset);
          fbb.addInt64(10, object.attributeTable.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final attributeIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final labelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final attribute_template_idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final isActiveParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final isRequiredParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final object = AttributeDataTable(
              id: idParam,
              attributeId: attributeIdParam,
              label: labelParam,
              type: typeParam,
              value: valueParam,
              attribute_template_id: attribute_template_idParam,
              isActive: isActiveParam,
              isRequired: isRequiredParam);
          object.attributeTable.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.attributeTable.attach(store);
          return object;
        }),
    AttributeTable: obx_int.EntityDefinition<AttributeTable>(
        model: _entities[1],
        toOneRelations: (AttributeTable object) => [],
        toManyRelations: (AttributeTable object) => {
              obx_int.RelInfo<AttributeDataTable>.toOneBacklink(
                  11,
                  object.id,
                  (AttributeDataTable srcObject) =>
                      srcObject.attributeTable): object.attributeDataTable
            },
        getId: (AttributeTable object) => object.id,
        setId: (AttributeTable object, int id) {
          object.id = id;
        },
        objectToFB: (AttributeTable object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.templateId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final templateIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = AttributeTable(
              id: idParam, templateId: templateIdParam, name: nameParam);
          obx_int.InternalToManyAccess.setRelInfo<AttributeTable>(
              object.attributeDataTable,
              store,
              obx_int.RelInfo<AttributeDataTable>.toOneBacklink(11, object.id,
                  (AttributeDataTable srcObject) => srcObject.attributeTable));
          return object;
        }),
    SetAttributeDataTable: obx_int.EntityDefinition<SetAttributeDataTable>(
        model: _entities[2],
        toOneRelations: (SetAttributeDataTable object) =>
            [object.customerTable],
        toManyRelations: (SetAttributeDataTable object) => {},
        getId: (SetAttributeDataTable object) => object.id,
        setId: (SetAttributeDataTable object, int id) {
          object.id = id;
        },
        objectToFB: (SetAttributeDataTable object, fb.Builder fbb) {
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.attributeId);
          fbb.addOffset(2, valueOffset);
          fbb.addInt64(5, object.customerTable.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final attributeIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = SetAttributeDataTable(
              id: idParam, attributeId: attributeIdParam, value: valueParam);
          object.customerTable.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.customerTable.attach(store);
          return object;
        }),
    AddressTable: obx_int.EntityDefinition<AddressTable>(
        model: _entities[3],
        toOneRelations: (AddressTable object) => [object.customerTable],
        toManyRelations: (AddressTable object) => {},
        getId: (AddressTable object) => object.id,
        setId: (AddressTable object, int id) {
          object.id = id;
        },
        objectToFB: (AddressTable object, fb.Builder fbb) {
          final areaOffset = fbb.writeString(object.area);
          final streetOffset = fbb.writeString(object.street);
          final detailsOffset = fbb.writeString(object.details);
          final phoneNumberOffset = fbb.writeString(object.phoneNumber);
          final addressTypeOffset = fbb.writeString(object.addressType);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.countryId);
          fbb.addInt64(3, object.stateId);
          fbb.addOffset(4, areaOffset);
          fbb.addOffset(5, streetOffset);
          fbb.addOffset(6, detailsOffset);
          fbb.addOffset(7, phoneNumberOffset);
          fbb.addOffset(8, addressTypeOffset);
          fbb.addBool(9, object.isDefault);
          fbb.addInt64(10, object.customerTable.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final countryIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final stateIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final areaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final streetParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final detailsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final phoneNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final addressTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final isDefaultParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final object = AddressTable(
              id: idParam,
              countryId: countryIdParam,
              stateId: stateIdParam,
              area: areaParam,
              street: streetParam,
              details: detailsParam,
              phoneNumber: phoneNumberParam,
              addressType: addressTypeParam,
              isDefault: isDefaultParam);
          object.customerTable.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.customerTable.attach(store);
          return object;
        }),
    CustomerTable: obx_int.EntityDefinition<CustomerTable>(
        model: _entities[4],
        toOneRelations: (CustomerTable object) => [object.addressTable],
        toManyRelations: (CustomerTable object) => {
              obx_int.RelInfo<CustomerTable>.toMany(8, object.id):
                  object.setAttachmentTable,
              obx_int.RelInfo<CustomerTable>.toMany(9, object.id):
                  object.setAttributeTable
            },
        getId: (CustomerTable object) => object.id,
        setId: (CustomerTable object, int id) {
          object.id = id;
        },
        objectToFB: (CustomerTable object, fb.Builder fbb) {
          final firstNameEnOffset = fbb.writeString(object.firstNameEn);
          final firstNameArOffset = fbb.writeString(object.firstNameAr);
          final lastNameEnOffset = fbb.writeString(object.lastNameEn);
          final lastNameArOffset = fbb.writeString(object.lastNameAr);
          final fatherNameEnOffset = fbb.writeString(object.fatherNameEn);
          final fatherNameArOffset = fbb.writeString(object.fatherNameAr);
          final motherNameEnOffset = fbb.writeString(object.motherNameEn);
          final motherNameArOffset = fbb.writeString(object.motherNameAr);
          final dateOfBirthOffset = fbb.writeString(object.dateOfBirth);
          final placeOfBirthOffset = fbb.writeString(object.placeOfBirth);
          final phoneNumberOffset = fbb.writeString(object.phoneNumber);
          final mobileNumberOffset = fbb.writeString(object.mobileNumber);
          final emailOffset = fbb.writeString(object.email);
          final createdAtOffset = fbb.writeString(object.createdAt);
          final titleOffset = fbb.writeString(object.title);
          final genderOffset = fbb.writeString(object.gender);
          fbb.startTable(27);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.customerId);
          fbb.addOffset(2, firstNameEnOffset);
          fbb.addOffset(3, firstNameArOffset);
          fbb.addOffset(4, lastNameEnOffset);
          fbb.addOffset(5, lastNameArOffset);
          fbb.addOffset(6, fatherNameEnOffset);
          fbb.addOffset(7, fatherNameArOffset);
          fbb.addOffset(8, motherNameEnOffset);
          fbb.addOffset(9, motherNameArOffset);
          fbb.addOffset(10, dateOfBirthOffset);
          fbb.addOffset(11, placeOfBirthOffset);
          fbb.addOffset(12, phoneNumberOffset);
          fbb.addOffset(13, mobileNumberOffset);
          fbb.addOffset(14, emailOffset);
          fbb.addBool(15, object.status);
          fbb.addInt64(16, object.templateId);
          fbb.addOffset(17, createdAtOffset);
          fbb.addInt64(19, object.addressTable.targetId);
          fbb.addOffset(20, titleOffset);
          fbb.addOffset(21, genderOffset);
          fbb.addBool(22, object.createdSuccessfully);
          fbb.addBool(23, object.attributesSuccessfully);
          fbb.addBool(24, object.addressSuccessfully);
          fbb.addBool(25, object.attachmentsSuccessfully);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final customerIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final genderParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 46, '');
          final firstNameEnParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final firstNameArParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final lastNameEnParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final lastNameArParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final fatherNameEnParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final fatherNameArParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final motherNameEnParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final motherNameArParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final dateOfBirthParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final placeOfBirthParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, '');
          final phoneNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, '');
          final mobileNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final statusParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 34, false);
          final templateIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          final createdAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 38, '');
          final createdSuccessfullyParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 48, false);
          final addressSuccessfullyParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 52, false);
          final attributesSuccessfullyParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 50, false);
          final attachmentsSuccessfullyParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 54, false);
          final object = CustomerTable(
              id: idParam,
              customerId: customerIdParam,
              title: titleParam,
              gender: genderParam,
              firstNameEn: firstNameEnParam,
              firstNameAr: firstNameArParam,
              lastNameEn: lastNameEnParam,
              lastNameAr: lastNameArParam,
              fatherNameEn: fatherNameEnParam,
              fatherNameAr: fatherNameArParam,
              motherNameEn: motherNameEnParam,
              motherNameAr: motherNameArParam,
              dateOfBirth: dateOfBirthParam,
              placeOfBirth: placeOfBirthParam,
              phoneNumber: phoneNumberParam,
              mobileNumber: mobileNumberParam,
              email: emailParam,
              status: statusParam,
              templateId: templateIdParam,
              createdAt: createdAtParam,
              createdSuccessfully: createdSuccessfullyParam,
              addressSuccessfully: addressSuccessfullyParam,
              attributesSuccessfully: attributesSuccessfullyParam,
              attachmentsSuccessfully: attachmentsSuccessfullyParam);
          object.addressTable.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0);
          object.addressTable.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<CustomerTable>(
              object.setAttachmentTable,
              store,
              obx_int.RelInfo<CustomerTable>.toMany(8, object.id));
          obx_int.InternalToManyAccess.setRelInfo<CustomerTable>(
              object.setAttributeTable,
              store,
              obx_int.RelInfo<CustomerTable>.toMany(9, object.id));
          return object;
        }),
    CountryTable: obx_int.EntityDefinition<CountryTable>(
        model: _entities[5],
        toOneRelations: (CountryTable object) => [],
        toManyRelations: (CountryTable object) => {},
        getId: (CountryTable object) => object.id,
        setId: (CountryTable object, int id) {
          object.id = id;
        },
        objectToFB: (CountryTable object, fb.Builder fbb) {
          final codeOffset = fbb.writeString(object.code);
          final nameEnOffset = fbb.writeString(object.nameEn);
          final nameArOffset = fbb.writeString(object.nameAr);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.countryId);
          fbb.addOffset(2, codeOffset);
          fbb.addOffset(3, nameEnOffset);
          fbb.addOffset(4, nameArOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final countryIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameArParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final nameEnParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = CountryTable(
              id: idParam,
              countryId: countryIdParam,
              code: codeParam,
              nameAr: nameArParam,
              nameEn: nameEnParam);

          return object;
        }),
    StateTable: obx_int.EntityDefinition<StateTable>(
        model: _entities[6],
        toOneRelations: (StateTable object) => [],
        toManyRelations: (StateTable object) => {},
        getId: (StateTable object) => object.id,
        setId: (StateTable object, int id) {
          object.id = id;
        },
        objectToFB: (StateTable object, fb.Builder fbb) {
          final codeOffset = fbb.writeString(object.code);
          final nameEnOffset = fbb.writeString(object.nameEn);
          final nameArOffset = fbb.writeString(object.nameAr);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.stateId);
          fbb.addOffset(2, codeOffset);
          fbb.addOffset(3, nameEnOffset);
          fbb.addOffset(4, nameArOffset);
          fbb.addInt64(5, object.countryId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final stateIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final countryIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final codeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameArParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final nameEnParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = StateTable(
              id: idParam,
              stateId: stateIdParam,
              countryId: countryIdParam,
              code: codeParam,
              nameAr: nameArParam,
              nameEn: nameEnParam);

          return object;
        }),
    SetAttachmentDataTable: obx_int.EntityDefinition<SetAttachmentDataTable>(
        model: _entities[7],
        toOneRelations: (SetAttachmentDataTable object) =>
            [object.customerTable],
        toManyRelations: (SetAttachmentDataTable object) => {},
        getId: (SetAttachmentDataTable object) => object.id,
        setId: (SetAttachmentDataTable object, int id) {
          object.id = id;
        },
        objectToFB: (SetAttachmentDataTable object, fb.Builder fbb) {
          final fileOffset = fbb.writeString(object.file);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.attributeId);
          fbb.addOffset(2, fileOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addBool(4, object.isUploaded);
          fbb.addBool(5, object.hasError);
          fbb.addInt64(7, object.customerTable.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final attributeIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final fileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final isUploadedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final hasErrorParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final object = SetAttachmentDataTable(
              id: idParam,
              attributeId: attributeIdParam,
              file: fileParam,
              name: nameParam,
              isUploaded: isUploadedParam,
              hasError: hasErrorParam);
          object.customerTable.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.customerTable.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AttributeDataTable] entity fields to define ObjectBox queries.
class AttributeDataTable_ {
  /// See [AttributeDataTable.id].
  static final id =
      obx.QueryIntegerProperty<AttributeDataTable>(_entities[0].properties[0]);

  /// See [AttributeDataTable.attributeId].
  static final attributeId =
      obx.QueryIntegerProperty<AttributeDataTable>(_entities[0].properties[1]);

  /// See [AttributeDataTable.label].
  static final label =
      obx.QueryStringProperty<AttributeDataTable>(_entities[0].properties[2]);

  /// See [AttributeDataTable.attribute_template_id].
  static final attribute_template_id =
      obx.QueryIntegerProperty<AttributeDataTable>(_entities[0].properties[3]);

  /// See [AttributeDataTable.isRequired].
  static final isRequired =
      obx.QueryBooleanProperty<AttributeDataTable>(_entities[0].properties[4]);

  /// See [AttributeDataTable.isActive].
  static final isActive =
      obx.QueryBooleanProperty<AttributeDataTable>(_entities[0].properties[5]);

  /// See [AttributeDataTable.type].
  static final type =
      obx.QueryStringProperty<AttributeDataTable>(_entities[0].properties[6]);

  /// See [AttributeDataTable.value].
  static final value =
      obx.QueryStringProperty<AttributeDataTable>(_entities[0].properties[7]);

  /// See [AttributeDataTable.attributeTable].
  static final attributeTable =
      obx.QueryRelationToOne<AttributeDataTable, AttributeTable>(
          _entities[0].properties[8]);
}

/// [AttributeTable] entity fields to define ObjectBox queries.
class AttributeTable_ {
  /// See [AttributeTable.id].
  static final id =
      obx.QueryIntegerProperty<AttributeTable>(_entities[1].properties[0]);

  /// See [AttributeTable.name].
  static final name =
      obx.QueryStringProperty<AttributeTable>(_entities[1].properties[1]);

  /// See [AttributeTable.templateId].
  static final templateId =
      obx.QueryIntegerProperty<AttributeTable>(_entities[1].properties[2]);

  /// see [AttributeTable.attributeDataTable]
  static final attributeDataTable =
      obx.QueryBacklinkToMany<AttributeDataTable, AttributeTable>(
          AttributeDataTable_.attributeTable);
}

/// [SetAttributeDataTable] entity fields to define ObjectBox queries.
class SetAttributeDataTable_ {
  /// See [SetAttributeDataTable.id].
  static final id = obx.QueryIntegerProperty<SetAttributeDataTable>(
      _entities[2].properties[0]);

  /// See [SetAttributeDataTable.attributeId].
  static final attributeId = obx.QueryIntegerProperty<SetAttributeDataTable>(
      _entities[2].properties[1]);

  /// See [SetAttributeDataTable.value].
  static final value = obx.QueryStringProperty<SetAttributeDataTable>(
      _entities[2].properties[2]);

  /// See [SetAttributeDataTable.customerTable].
  static final customerTable =
      obx.QueryRelationToOne<SetAttributeDataTable, CustomerTable>(
          _entities[2].properties[3]);
}

/// [AddressTable] entity fields to define ObjectBox queries.
class AddressTable_ {
  /// See [AddressTable.id].
  static final id =
      obx.QueryIntegerProperty<AddressTable>(_entities[3].properties[0]);

  /// See [AddressTable.countryId].
  static final countryId =
      obx.QueryIntegerProperty<AddressTable>(_entities[3].properties[1]);

  /// See [AddressTable.stateId].
  static final stateId =
      obx.QueryIntegerProperty<AddressTable>(_entities[3].properties[2]);

  /// See [AddressTable.area].
  static final area =
      obx.QueryStringProperty<AddressTable>(_entities[3].properties[3]);

  /// See [AddressTable.street].
  static final street =
      obx.QueryStringProperty<AddressTable>(_entities[3].properties[4]);

  /// See [AddressTable.details].
  static final details =
      obx.QueryStringProperty<AddressTable>(_entities[3].properties[5]);

  /// See [AddressTable.phoneNumber].
  static final phoneNumber =
      obx.QueryStringProperty<AddressTable>(_entities[3].properties[6]);

  /// See [AddressTable.addressType].
  static final addressType =
      obx.QueryStringProperty<AddressTable>(_entities[3].properties[7]);

  /// See [AddressTable.isDefault].
  static final isDefault =
      obx.QueryBooleanProperty<AddressTable>(_entities[3].properties[8]);

  /// See [AddressTable.customerTable].
  static final customerTable =
      obx.QueryRelationToOne<AddressTable, CustomerTable>(
          _entities[3].properties[9]);
}

/// [CustomerTable] entity fields to define ObjectBox queries.
class CustomerTable_ {
  /// See [CustomerTable.id].
  static final id =
      obx.QueryIntegerProperty<CustomerTable>(_entities[4].properties[0]);

  /// See [CustomerTable.customerId].
  static final customerId =
      obx.QueryIntegerProperty<CustomerTable>(_entities[4].properties[1]);

  /// See [CustomerTable.firstNameEn].
  static final firstNameEn =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[2]);

  /// See [CustomerTable.firstNameAr].
  static final firstNameAr =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[3]);

  /// See [CustomerTable.lastNameEn].
  static final lastNameEn =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[4]);

  /// See [CustomerTable.lastNameAr].
  static final lastNameAr =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[5]);

  /// See [CustomerTable.fatherNameEn].
  static final fatherNameEn =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[6]);

  /// See [CustomerTable.fatherNameAr].
  static final fatherNameAr =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[7]);

  /// See [CustomerTable.motherNameEn].
  static final motherNameEn =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[8]);

  /// See [CustomerTable.motherNameAr].
  static final motherNameAr =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[9]);

  /// See [CustomerTable.dateOfBirth].
  static final dateOfBirth =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[10]);

  /// See [CustomerTable.placeOfBirth].
  static final placeOfBirth =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[11]);

  /// See [CustomerTable.phoneNumber].
  static final phoneNumber =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[12]);

  /// See [CustomerTable.mobileNumber].
  static final mobileNumber =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[13]);

  /// See [CustomerTable.email].
  static final email =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[14]);

  /// See [CustomerTable.status].
  static final status =
      obx.QueryBooleanProperty<CustomerTable>(_entities[4].properties[15]);

  /// See [CustomerTable.templateId].
  static final templateId =
      obx.QueryIntegerProperty<CustomerTable>(_entities[4].properties[16]);

  /// See [CustomerTable.createdAt].
  static final createdAt =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[17]);

  /// See [CustomerTable.addressTable].
  static final addressTable =
      obx.QueryRelationToOne<CustomerTable, AddressTable>(
          _entities[4].properties[18]);

  /// See [CustomerTable.title].
  static final title =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[19]);

  /// See [CustomerTable.gender].
  static final gender =
      obx.QueryStringProperty<CustomerTable>(_entities[4].properties[20]);

  /// See [CustomerTable.createdSuccessfully].
  static final createdSuccessfully =
      obx.QueryBooleanProperty<CustomerTable>(_entities[4].properties[21]);

  /// See [CustomerTable.attributesSuccessfully].
  static final attributesSuccessfully =
      obx.QueryBooleanProperty<CustomerTable>(_entities[4].properties[22]);

  /// See [CustomerTable.addressSuccessfully].
  static final addressSuccessfully =
      obx.QueryBooleanProperty<CustomerTable>(_entities[4].properties[23]);

  /// See [CustomerTable.attachmentsSuccessfully].
  static final attachmentsSuccessfully =
      obx.QueryBooleanProperty<CustomerTable>(_entities[4].properties[24]);

  /// see [CustomerTable.setAttachmentTable]
  static final setAttachmentTable =
      obx.QueryRelationToMany<CustomerTable, SetAttachmentDataTable>(
          _entities[4].relations[0]);

  /// see [CustomerTable.setAttributeTable]
  static final setAttributeTable =
      obx.QueryRelationToMany<CustomerTable, SetAttributeDataTable>(
          _entities[4].relations[1]);
}

/// [CountryTable] entity fields to define ObjectBox queries.
class CountryTable_ {
  /// See [CountryTable.id].
  static final id =
      obx.QueryIntegerProperty<CountryTable>(_entities[5].properties[0]);

  /// See [CountryTable.countryId].
  static final countryId =
      obx.QueryIntegerProperty<CountryTable>(_entities[5].properties[1]);

  /// See [CountryTable.code].
  static final code =
      obx.QueryStringProperty<CountryTable>(_entities[5].properties[2]);

  /// See [CountryTable.nameEn].
  static final nameEn =
      obx.QueryStringProperty<CountryTable>(_entities[5].properties[3]);

  /// See [CountryTable.nameAr].
  static final nameAr =
      obx.QueryStringProperty<CountryTable>(_entities[5].properties[4]);
}

/// [StateTable] entity fields to define ObjectBox queries.
class StateTable_ {
  /// See [StateTable.id].
  static final id =
      obx.QueryIntegerProperty<StateTable>(_entities[6].properties[0]);

  /// See [StateTable.stateId].
  static final stateId =
      obx.QueryIntegerProperty<StateTable>(_entities[6].properties[1]);

  /// See [StateTable.code].
  static final code =
      obx.QueryStringProperty<StateTable>(_entities[6].properties[2]);

  /// See [StateTable.nameEn].
  static final nameEn =
      obx.QueryStringProperty<StateTable>(_entities[6].properties[3]);

  /// See [StateTable.nameAr].
  static final nameAr =
      obx.QueryStringProperty<StateTable>(_entities[6].properties[4]);

  /// See [StateTable.countryId].
  static final countryId =
      obx.QueryIntegerProperty<StateTable>(_entities[6].properties[5]);
}

/// [SetAttachmentDataTable] entity fields to define ObjectBox queries.
class SetAttachmentDataTable_ {
  /// See [SetAttachmentDataTable.id].
  static final id = obx.QueryIntegerProperty<SetAttachmentDataTable>(
      _entities[7].properties[0]);

  /// See [SetAttachmentDataTable.attributeId].
  static final attributeId = obx.QueryIntegerProperty<SetAttachmentDataTable>(
      _entities[7].properties[1]);

  /// See [SetAttachmentDataTable.file].
  static final file = obx.QueryStringProperty<SetAttachmentDataTable>(
      _entities[7].properties[2]);

  /// See [SetAttachmentDataTable.name].
  static final name = obx.QueryStringProperty<SetAttachmentDataTable>(
      _entities[7].properties[3]);

  /// See [SetAttachmentDataTable.isUploaded].
  static final isUploaded = obx.QueryBooleanProperty<SetAttachmentDataTable>(
      _entities[7].properties[4]);

  /// See [SetAttachmentDataTable.hasError].
  static final hasError = obx.QueryBooleanProperty<SetAttachmentDataTable>(
      _entities[7].properties[5]);

  /// See [SetAttachmentDataTable.customerTable].
  static final customerTable =
      obx.QueryRelationToOne<SetAttachmentDataTable, CustomerTable>(
          _entities[7].properties[6]);
}
